+ Physics
  + [done] matter.js for 2d
    + [done] integrate into timestep
    + [done] Game.setPhysicsEngine = MatterJS ;
  + cannon.js for 3d
    + integrate into timestep
    + Game.setPhysicsEngine = CannonJS ;
  + [done] Game.disablePhysics to deactivate


+ vector text

+ helper functions
  + smooth damping

+ TileMap
  + loading from Tiled .tmx or json
  + matter.js hull integration
  + raycasting for tiles

+ Scene debugger
  + UI for displaying what's in the SM scene

+ debug 3D camera control
  + lets you override scene camera and steer it around using mouse
    + pushes control scheme and generates its own

+ pathfinding system
  + general *star solver for any dimensions

+ In-game UI


+ examples
  + [done] sound example
  + [done] keyboard/mouse system
  + [done] spritesheet example
  + intro
  + vector example
  + ingame UI
  + 3d mini-game
    + shooting game with top-down perspective
      + control example spaceship
      + shoot the old-style spaceships
  + 2d mini-game
    + platformer (of course)
    + simple movement controls
    + one enemy
    + tilemap level

--- BUGS ---

+ [done] JSON not being sent with correct mime type
  + [done] fixup, just convert it if isn't an object


--- DONE ---

+ [done] Basic scenegraph
  + [done] nested groups of objects, called SceneGroup
    + [done] each has a SceneObject (or another SceneGroup)
    + [done] automatic update/render calls (if used via scenes)


+ [done] remove as many external dependencies in SmokingMirror
  + [done] assets.js
    + [done] switch to XHR loader
  + [done] game.js
    + [done] remove jQuery calls
    + [done] make dat.gui optional
    + [done] make stats.js optional

+ [done] AnimatedSprite
  + [done] allow multiple animations per sprite
  + [done] can use a spritesheet or just an array of textures
  + [done] get name of anim playing
  + [done] get frame of anim playing
  + [done] get maximum frames in anim
  + [done] stop
  + [done] play
  + [done] reset
  + [done] goto (to certain frame)
  + [done] event on end of anim (when stopping)
  + [done] event on end of loop cycle
  + [done] loop setting, per animation
  + [done] speed (in FPS), per animation
  + [done] push animation to stack in order to resume
  + [done] pop animation

+ [done] write spritesheet parser (since PIXI wants me to use their own built-in asset loader/cacher)
  + [done] read in JSON, split into textures

+ [done] input event system
  + [done] Keyboard
  + [done] Mouse
  + [done] push/pop state, so can easily take/relinquish control
  + [done] ability to convert client coords of mouse to local canvas coords
  + [done] partial support for touch

+ [done] display progress on loading

+ [done] Sound
  + [done] sound.js
  + [done] sound asset loading
  + [done] sound manager (for global volume)
    + [done] add music volume
